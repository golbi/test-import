UNICORE & Unity HowTo
=====================
Unity Team <unity-idm-discuss@lists.sourceforge.net>
:revnumber: 1.0.0
:numbered:
:toc: left
:linkcss:
:iconsdir: ./icons
:icons: font


== Introduction

This guide describes how to integrate http://unicore.eu[UNICORE Grid middleware] with Unity.

Unity is an optional element for UNICORE, i.e. UNICORE can be used without Unity. Without Unity, UNICORE users need 
to authenticate themselves using personal X.509 certificates. Certificate to UNIX mappings are then stored 
in a special service called XUUDB which is a part of the UNICORE stack. REST access (if enabled) requires configuring 
username and password mappings to certificates in a text file. 

Unity is used whenever a more advanced and flexible authentication and/or user mapping capabilities are needed. 
Precisely Unity provides support for the following use-cases:

* Users can access UNICORE without X.509 certificate (aka _certificate-less access_).
* Unity can serve as common authentication provider for UNICORE Portal, UNICORE Rich Client (URC) and 
UNICORE Command Line Client (UCC).
* Unity can serve as an authentication provider for RESTful clients of the UNICORE middleware.
* Unity can serve as an advanced attribute provider (AIP in UNICRE terminology) for UNICORE servers, replacing XUUDB -- 
the default, simple service.
* Unity can verify UNICORE users' passwords against its own database, against LDAP, using PAM or with a mixture of
those options.

In general if Unity is being deployed, it is the most convenient to use it as a central and the only point
of UNICORE users management.

There are numerous scenarios and variants in which UNICORE can be used, here we provide a description of the one
using Unity for all possible scenarios.

== Using Unity with host OS authentication

In this scenario Unity will be configured to support all UNICORE use-cases, authenticating UNICORE users with their
UNIX of the machine hosting Unity. This scenario is relevant when UNICORE is a remote access service for 
a single HPC cluster. It is rather not useful in a multi-site deployment, as then typically there are different 
users on different machines (of course Unity can be used in such scenario but the PAM authentication is not useful then). 

=== With demo certificates

UNICORE provide a quickstart distribution which allows admins for super-easy deployment of the stack, which is great for
experimentation. Unity integrates seamlessly with UNICORE quickstart, allowing one to start playing with UNICORE
quickly.

The downside of using the quickstart deployment is that out of the box an insecure server certificates are used. 
The following <<secure_certs,section>> provides an instruction how to replace the demo certificates with secure ones. 

. *Install Unity* -- Download the latest tar.gz distribution of Unity from 
https://sourceforge.net/projects/unity-idm/files/Unity%20server[Unity downloads site], and unpack it in 
the installation directory of choice.
. *Enable UNICORE support with PAM* -- In the +conf/unityServer.conf+ file search for a commented lines 
starting with +$include.unicoreWithPam+ and +$include.unicoreDemo+. Uncomment both of them 
(i.e. remove the leading +#+ and any spaces). You will find them towards the end of the file in the _Modules_ section. 
. *Disable not required Unity features* _(optional but advised)_ -- 
In the same +conf/unityServer.conf+ file in the modules section comment out lines starting with:
+$include.oauthAS+, +$include.samlIdP+, +$include.demoContents+.
. *Configure PAM* -- Create a PAM facility for Unity. The facility should be named +unity+, i.e. should be in  
a file +/etc/pam.d/unity+. Use any PAM authentication requirements you prefer, e.g. the same one which is used 
for local authentication to the system. Note that if you use the +pam_unix+ module (authentication against the standard 
+/etc/shadow+ passwords DB), then the user which is running Unity must be able to read the shadow file.
See <<manual.txt#pam-authenticator,Unity documentation>> for more details. 
. *Start Unity* -- Run +bin/unity-idm-server-start+ script. Check the +logs/*+ for any startup problems.

=== Basic administration

After configuring Unity it may be needed to perform some fine tuning or inspect things. Most of those operations is
performed from the Unity Admin UI. It is available by default under +https://your.host.org:2443/console+ address. 
Login with the user name +admin+ and password +the!unity+. You will be prompted to change the default password. 

In the main panel you will see the hierarchy of groups with your users (all UNICORE users will appear in proper group
after using the system) and server(s).

. *How to change Unity network settings?* By default server listens on all interfaces on the +2443+ port. 
Update those settings in the network section of the +conf/unityServer.conf+. Make sure to also properly set 
the advertised address (this must be the address that external clients are using when accessing Unity). 
. *How to limit UNICORE access to members of a particular Unix group?* Open the 
+conf/modules/unicore/tr-hostOS2UNICORE.json+ file, find the condition of the first rule there. Change its value
from +true+ to +groups contains 'mygroup'+, putting your desired UNIX group there.  

[[secure_certs]]
=== From demo certificates to production 

If the infrastructure works well with the demo certificates, before going into production the secure certificates 
needs to be installed -- both for Unity and UNICORE. Unity must be also aware of the certificate used by UNICORE
so it is authorized to perform required read operations.

First of all remove the insecure demo certificates and authorization of Demo UNICORE servers:

. *Remove trust to the Demo CA* -- Remove the file +conf/pki/trusted-ca/unicore-demoCA.pem+.
. *Remove the demo certificate of Unity server* -- Remove the file +conf/pki/demoKeystore.p12+.
. *Remove the authorization of Demo UNICORE servers* -- Login to Unity Admin panel, select all lines in the 
identities list with name starting with _Demo UNICORE..._ and remove them (the _Delete entity_ operation).
. *Turn off the UNICORE demo configuration module* -- Comment the line starting with +$include.unicoreDemo+ in the 
+conf/unityServer.conf+ file.

Now the production certificates needs to be installed:

. *Install the proper CA* -- if you use a custom CA for UNICORE deployment put the CA certificate file in 
the +conf/pki/trusted-ca/+ directory, making sure that it has extension (and format) +.pem+. You can also put multiple 
CA files there. Otherwise, if a more complex trust settings are needed (e.g. machine's openssl truststore should be used, 
or the default Java truststore or any other schema), please see the <<manual.txt#server_trust,Unity documentation>> 
for possible truststore configuration options. The truststore type and parameters are configured in 
the +conf/pki.properties+ file.
. *Install Unity server certificate* put your keystore PKCS12 file with server's certificate and private key in
the +conf/pki/+ directory and in the file +conf/pki.properties+ set its name, password and key alias in the credential
section. In case when other then PKCS12 credential format is used (e.g. Java's JKS or a pair of PEM files) see 
the <<manual.txt#server_cred,Unity documentation>> for possible options.
. *Authorize the production UNICORE server(s) to use Unity* -- Login to Unity Admin panel, and select 
the +/unicore/servers+ group in the groups browser. Invoke the _add entity_ action. In the dialog select the 
X500 identity format and either paste the DN of the production UNICORE server, or upload its certificate. 
Leave other settings with their defaults. Repeat this step for each UNICORE server which shall be supported 
(global registry, workflow, ...).

Make sure to restart the server -- what needs to be performed always after changing server's credential. Note that
in future adding additional trusted UNICORE servers does not require restart. 

== Configuring UNICORE to use Unity

In order to configure UNICORE quickstart distribution to use Unity for all of the supported scenarios  
the following steps should be performed:

. *Installation pre-configuration* -- When configuring UNICORE installation in the +configure.properties+ file,
make sure to set the +xuudb+ and +installdemocerts+ properties to +false+. Everything else, including UNICORE 
installation, shall be performed in a regular way.
. *Changes in Gateway configuration* -- Add the following line to the +gateway.properties+ file: 
+gateway.httpServer.requireClientAuthn=false+.
. *Changes in container configuration* -- the following settings should be applied for every UNICORE service which
is deployed: UNICORE/X  (aka UAS), Registry (aka Global Registry), Service Orchestrator (aka Servorch) 
and Workflow serivce. All of those services have +conf/uas.config+ file, where the same set of changes should be applied.
.. *REST authN over Unity* Set +container.security.rest.authentication.order=UNITY+ and 
uncomment or create lines with the following properties:
+
----
container.security.rest.authentication.UNITY.class=eu.unicore.services.rest.security.UnitySAMLAuthenticator
container.security.rest.authentication.UNITY.address=https://localhost:2443/unicore-soapidp/saml2unicoreidp-soap/AuthenticationService
container.security.rest.authentication.UNITY.validate=true
----
+
Make sure to use Unity host address and port matching your site. The path must not be changed.
.. *Use Unity as attributes provider* Set +container.security.attributes.order=VO-PULL+ and uncomment or create lines
with following properties:
+
----
container.security.attributes.VO-PULL.class=eu.unicore.uas.security.vo.SAMLPullAuthoriser
container.security.attributes.VO-PULL.configurationFile=conf/vo.config
----
.. *Set Unity connection configuration* -- use the following configuration as a template for a file which should be 
stored as +conf/vo.config+ in your service directory. Some of UNICORE services has already this file -- 
then it needs to be updated, otherwise created. Update the template as following:
... change +localhost:2443+ in the +vo.voServerURI+ and +vo.pull.voServerURL+ properties to proper address 
of Unity server.
... change the +DEMO-SITE+ in +vo.localServerURI+ to match your service (e.g. change to +WORKFLOW+ in 
case of the workflow service).
+
----
# ##########################
# General configuration
# ##########################

# VO or group which is accepted by this attribute source. Server will honor
#  only attributes with exactly this scope or global (i.e. without scope set).
vo.group=/unicore/DEMO-SITE

# Those attributes specify a truststore, with certificates (not corresponding CA's 
#  certificates!) of trusted VO services. NEVER use the SSL truststore of UNICORE/X 
#  for this purpose as it effectively turns off the whole authorization! 
#  It is used for push mode and in pull mode when signature verification is enabled.

vo.truststore.type=directory

# It is REQUIRED if pull mode is enabled, and must be this server's URI used to identify 
#  to the VO service. In push mode it is used as this server actor's name (note that 
#  assertions in WS security element with no actor set are also accepted).
vo.localServerURI=https://localhost:8080/DEMO-SITE

# Unity server identification URI
vo.voServerURI=https://localhost:2443/unicore-soap-aip/saml2unicoreidp-soap/AssertionQueryService

# This group of settings defines mapping of SAML attributes to UNICORE incarnation attributes.
# If you use UVOS and standard attributes there you don't have to change them. 
# See documentation for details.
vo.unicoreAttribute.xlogin=urn:unicore:attrType:xlogin
vo.unicoreAttribute.xlogin.default=urn:unicore:attrType:defaultXlogin
vo.unicoreAttribute.role=urn:unicore:attrType:role
vo.unicoreAttribute.role.default=urn:unicore:attrType:defaultRole
vo.unicoreAttribute.group=urn:unicore:attrType:primaryGid
vo.unicoreAttribute.group.default=urn:unicore:attrType:defaultPrimaryGid
vo.unicoreAttribute.supplementaryGroups=urn:unicore:attrType:supplementaryGids
vo.unicoreAttribute.supplementaryGroups.default=urn:unicore:attrType:defaultSupplementaryGids
vo.unicoreAttribute.addDefaultGroups=urn:unicore:attrType:addDefaultGroups
vo.unicoreAttribute.queue=urn:unicore:attrType:queue
vo.unicoreAttribute.queue.default=urn:unicore:attrType:defaultQueue
vo.unicoreAttribute.virtualOrganisations=urn:SAML:voprofile:group



# ##########################
# PULL mode configuration
# ##########################

# Enable this mode? Default is false. Usually you can leave it with true value and control 
# whether the mode is enabled by using (or not) a respective attribute source in uas.config.
vo.pull.enable=true

vo.pull.enableGenericAttributes=true

# Full URL of SAML VO service.
# Note that this server's CA cert must be present in UNICORE/X truststore.
vo.pull.voServerURL=https://localhost:2443/unicore-soap-aip/saml2unicoreidp-soap/AssertionQueryService

# Additional security (except transport level which is always on) can be achieved by
#  verification of signatures. The key which is used for verification must be present
#  in vo.truststore (see above) and have an alias defined below. Default is true.

# Whether pull mode should be skipped if user sent (or pushed) some attributes with the request.
#  Note that to make this feature work PUSH mode must be enabled AND PULL authorizer must 
#  be invoked AFTER the PUSH authorizer.
vo.pull.disableIfAttributesWerePushed=false

# Caching time of pulled attributes (in seconds). Use negative value to turn off the cache.  
vo.pull.cacheTtl=-1


# ##########################
# PUSH mode configuration
# ##########################

# Enable this mode? Default is false. Usually you can leave it with true value and control 
# whether the mode is enabled by using (or not) a respective attribute source in uas.config.
vo.push.enable=false
----


== Basic testing

Please refer to UNICORE manuals for complete information on available clients and their usage. This section 
only provides information how to test if the server side setup is correctly working.

=== With UCC

Make sure that the following settings are in your UCC preferences file with proper host and port of Unity server,
and actual user name:

----
authenticationMethod=unity
unity.address=https://localhost:2443/unicore-soapidp/saml2unicoreidp-soap/AuthenticationService
unity.username=alice
----

Try:

----
$> bin/ucc connect
$> bin/ucc list-sites
----


=== With curl

----
$> export BASE="https://localhost:8080/DEMO-SITE/rest/core"
$> curl -k -u alice -H "Accept: application/json" $BASE |python -m json.tool
----

Make sure to set proper usernam, host, port and site name of your UNICORE site. Note that in this case the REST client
is not contacting Unity.

