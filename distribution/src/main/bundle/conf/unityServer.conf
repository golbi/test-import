#######################################
# Server general settings
#######################################

unityServer.core.mailConfig=${CONF}/mail.properties
unityServer.core.templatesFile=${CONF}/msgTemplates.properties
unityServer.core.pkiConfigFile=${CONF}/pki.properties
unityServer.core.workspaceDirectory=${STATE}/workspace
unityServer.core.i18nMessagesDirectory=${CONF}/i18n
unityServer.core.defaultWebContentDirectory=${STATE}/webContents
unityServer.core.defaultTheme=unityThemeValo

unityServer.core.asyncStateUpdateInterval=60

unityServer.core.httpServer.port=2443
unityServer.core.httpServer.host=localhost
unityServer.core.httpServer.advertisedHost=localhost

unityServer.core.credential=MAIN
unityServer.core.truststore=MAIN

unityServer.core.enabledLocales.1=en English
unityServer.core.enabledLocales.2=pl Polski
unityServer.core.defaultLocale=en

unityServer.core.initialAdminUsername=admin
unityServer.core.initialAdminPassword=the!unity

unityServer.storage.engine=rdbms
unityServer.storage.engine.rdbms.jdbcUrl=jdbc:h2:file:${STATE}/data/unitydb.bin;LOCK_TIMEOUT=10000;MVCC=TRUE

#unityServer.core.confirmationRequestLimit=3
#unityServer.core.defaultPostConfirmationReturnURL=
#unityServer.core.automaticRedirectAfterConfirmation=false

#unityServer.core.ignoreContentsReloadingFromConfiguration=false
#unityServer.core.fullyRecreateEndpointsAROnStartup=true


#######################################
# Extension and initialization scripts
#######################################

# -> see in your enabled modules at the end

#######################################
# Input translation profile definitions
#######################################

# Input translation profiles can be defined here (or in modules) 
# but it is much easier to do this in the Web Admin UI.

# (!!) Note that profiles defined in configuration are always reloaded from
# configuration at restart.

# -> see in your enabled modules at the end


#######################################
# Credentials and 
# credential requirements
#######################################

# (!) Credentials and credential requirements can be defined here, 
# but it is much easier to do this in the Web Admin UI.

# -> see in your enabled modules at the end

#######################################
# Authenticators
#######################################

# Those are standard authenticators commonly used by default in various modules. 
# Other may be defined directly in modules.

unityServer.core.authenticators.pwdWeb.authenticatorName=pwdWeb
unityServer.core.authenticators.pwdWeb.authenticatorType=password with web-password
unityServer.core.authenticators.pwdWeb.localCredential=sys:password
unityServer.core.authenticators.pwdWeb.retrievalConfigurationFile=${CONF}/authenticators/passwordRetrieval.json

unityServer.core.authenticators.certWeb.authenticatorName=certWeb
unityServer.core.authenticators.certWeb.authenticatorType=certificate with web-certificate
unityServer.core.authenticators.certWeb.localCredential=Certificate credential
unityServer.core.authenticators.certWeb.retrievalConfigurationFile=${CONF}/authenticators/certificateRetrieval.json

unityServer.core.authenticators.pwdWS.authenticatorName=pwdWS
unityServer.core.authenticators.pwdWS.authenticatorType=password with cxf-httpbasic
unityServer.core.authenticators.pwdWS.localCredential=sys:password
unityServer.core.authenticators.pwdWS.retrievalConfigurationFile=${CONF}/authenticators/empty.json

unityServer.core.authenticators.pwdRest.authenticatorName=pwdRest
unityServer.core.authenticators.pwdRest.authenticatorType=password with rest-httpbasic
unityServer.core.authenticators.pwdRest.localCredential=sys:password

unityServer.core.authenticators.certWS.authenticatorName=certWS
unityServer.core.authenticators.certWS.authenticatorType=certificate with cxf-certificate
unityServer.core.authenticators.certWS.localCredential=Certificate credential
unityServer.core.authenticators.certWS.retrievalConfigurationFile=${CONF}/authenticators/empty.json

#######################################
# Realms
#######################################

unityServer.core.realms.1.realmName=defaultRealm
unityServer.core.realms.1.blockAfterUnsuccessfulLogins=4
unityServer.core.realms.1.blockFor=30
unityServer.core.realms.1.maxInactivity=3600
#unityServer.core.realms.1.enableRememberMeFor=3

unityServer.core.realms.2.realmName=adminRealm
unityServer.core.realms.2.blockAfterUnsuccessfulLogins=4
unityServer.core.realms.2.blockFor=30
unityServer.core.realms.2.maxInactivity=1800
#unityServer.core.realms.2.enableRememberMeFor=

#######################################
# Endpoints
#######################################

# -> see in your enabled modules below


#######################################
# Modules
#######################################

# Modules provide pre-configured features, so those can be easily enabled with a single line here
# Modules are simply a convention for configuration management: you can copy and paste each module contents
# directly to this file.

# Enables standard credentials and credential requirements
$include.core=${CONF}/modules/credential.module

# Enables core endpoints with Unity management features
$include.core=${CONF}/modules/core.module

# Enables OAuth AS functionality
$include.oauthAS=${CONF}/modules/oauthAS.module

# Enables SAML IdP functionality
$include.samlIdP=${CONF}/modules/samlIdP.module

# Enables loading of demonstrative contents
$include.demoContents=${CONF}/modules/demoContents.module

# Enables everything needed for supporting UNICORE platform authN - with PAM based authentication
# $include.unicoreWithPam=${CONF}/modules/unicoreWithPAM.module

# Installs and configures the UNICORE demo user (insecure) from its quickstart distribution
# $include.unicoreDemo=${CONF}/modules/unicoreDemoQuickstart.module
